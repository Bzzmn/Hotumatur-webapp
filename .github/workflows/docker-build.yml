name: Docker Build and Deploy

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GITHUB: ghcr.io
  IMAGE_NAME: hotumatur-app

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      job_status: ${{ job.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
            NEXT_PUBLIC_WC_API_URL=${{ secrets.NEXT_PUBLIC_WC_API_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Coolify
    needs: build
    if: |
      needs.build.result == 'success' && 
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Coolify via Webhook
        id: deploy
        run: |
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ secrets.COOLIFY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -H "x-webhook-secret: ${{ secrets.COOLIFY_WEBHOOK_SECRET }}" \
            -d '{
              "status": "success",
              "force": true,
              "image": "docker.io/bzzmn/hotumatur-app",
              "imageTag": "sha-${{ github.sha }}", 
              "branch": "${{ github.ref }}"
            }')
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)
          BODY=$(echo "$RESPONSE" | sed '$ d')
          
          echo "status_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "response=$BODY" >> $GITHUB_OUTPUT
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ Deployment triggered successfully"
          else
            echo "❌ Deployment failed with status code: $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "### Deployment Status 🚀" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: docker.io/bzzmn/hotumatur-app:sha-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Code**: ${{ steps.deploy.outputs.status_code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Response**: ${{ steps.deploy.outputs.response }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.deploy.outputs.status_code }}" -eq 200 ]; then
            echo "✅ Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi